1. 翻转字符串
先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。你的结果必须得是一个字符串。
function reverseString(str) {
  // 请把你的代码写在这里
  str = str.split("").reverse().join('');
  return str;
}
reverseString("Greetings from Earth") //"htraE morf sgniteerG".

2. 计算一个整数的阶乘
如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。阶乘通常简写成 n!
例如: 5! = 1 * 2 * 3 * 4 * 5 = 120；
function factorialize(num) {
  // 请把你的代码写在这里
  var count = num;
  if(num === 0)
    return 1;
  for (var i = 1;i<count;i++)
    {
      num = num*i;
    }
  return num;
}
factorialize(5); //120
/*
function factorialize(num) {
  if(num<1){
    return 1;    
  }else{
    return factorialize(num-1)*num;
  }
}
*/

3. 检查回文字符串
如果给定的字符串是回文，返回true，反之，返回false。如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。注意你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。
函数参数的值可以为"racecar"，"RaceCar"和"race CAR"；

function palindrome(str) {
  // 请把你的代码写在这里
  var string,string2;
  string = str.replace(/,/gi,"");
  string = string.replace(/ /gi,"");
  string = string.replace(".","");
  string = string.replace(/\ /gi,"");
  string = string.replace("/","");
  string = string.replace("-","");
  string = string.replace(":","");
  string = string.replace("_","");
  string = string.replace(/:/,"");
  string = string.replace(/-/,"");
  string = string.replace(")","");
  string = string.replace("(","");
  string = string.toLowerCase();
  string2 = string.split("").join('');
  string = string.split("").reverse().join('');
  if (string === string2)
    return true;
  else
    return false;
}
palindrome("0_0 (: /-\ :) 0-0");//true

/*
function palindrome(str) {
  var reg=/[^0-9a-z]/gi;
  var prestr = str.replace(reg,"").toLowerCase();
  var currstr=prestr.split("").reverse().join("");
  return currstr==prestr?true:false;
}
palindrome("eye"); //true
*/

4. 找出最长单词, 在句子中找出最长的单词，并返回它的长度。
函数的返回值应该是一个数字;
function findLongestWord(str) {
  // 请把你的代码写在这里
  var string = str.split(" ");
  var length = string[0].length;
  for (var i=0,j=1;i<string.length;i++,j++)
    {
      if (string[i].length>length)
        {
          length = string[i].length;
        }
    }
  return length;
}
findLongestWord("What is the average airspeed velocity of an unladen swallow"); //8

/*
function findLongestWord(str) {
  var strArr = str.split(" ").map(function(e){return e.length;}).sort(function(a,b){
    return a-b;
  });
  var strNum=strArr[strArr.length-1];
  return strNum;
}
*/

5. 句中单词首字母大写
确保字符串的每个单词首字母都大写，其余部分小写。像'the'和'of'这样的连接符同理。
function titleCase(str) {
  // 请把你的代码写在这里
  var string = str.toLowerCase().split(" ");//先变成小写，再分离每一个单词
  for (var i = 0;i<string.length;i++)
    {
      string[i] = string[i].split("");
      string[i][0] = string[i][0].toUpperCase();
      string[i] = string[i].join("");
    }
  string = string.join(" ");
  return string;
}
titleCase("I'm a little tea pot");// I'm A Little Tea Pot.
/*
function titleCase(str) {
  var upStr=str.split(" ").map(function(e){
    var a=e.toLowerCase().split("");
    a[0]=a[0].toUpperCase();
    return a.join("");
  }).join(" ");
  return upStr;
}
*/

6. 找出多个数组中的最大数
右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。
function largestOfFour(arr) {
  // 请把你的代码写在这里
  var longest = [],middle;
  for (var i = 0;i < arr.length;i++)
  {
   middle = arr[i][0];
    for (var j = 0;j < arr[i].length;j++)
      {
        
        if (middle<=arr[i][j])
          {
            longest[i] = arr[i][j];
            middle = arr[i][j];
          }
      }
  }
  return longest;
}
/*
function largestOfFour(arr) {
  var arr1=[];
  for(var i=0;i<arr.length;i++){
    arr1[i]=arr[i].sort(function(a,b){return a-b;}).pop();
  }
  return arr1;
}
*/

7. 检查字符串结尾
判断一个字符串(str)是否以指定的字符串(target)结尾。如果是，返回true;如果不是，返回false。
function confirmEnding(str, target) {
  // 请把你的代码写在这里
  var string = str.split(" ");
  var count = target.length;
      if (str.substr(str.length-count,count) === target)
        return true;
      else 
        return false;
}
confirmEnding("He has to give me a new name", "me");//true
/*
function confirmEnding(str, target) {
  return str.substr(-target.length) == target;
}
confirmEnding("Bastian", "n");
//true
*/

8. 重复输出字符串
（重要的事情说3遍）。重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。
function repeat(str, num) {
  // 请把你的代码写在这里
  if (num<0)
    return "";
  else 
    {
      var arr = [];
      for (var i = 0;i < num;i++)
        {
            arr[i] = str;
        }
      return arr.join("");
    }
}
repeat("abc", 3);
/*
function repeat(str, num) {
  var str1=str;
  if(num>0){
    for(var i=1;i<num;i++){
      str+=str1;
    }
    return str;
  }else{
    return "";
  }
}
repeat("abc", 3);//abcabcabc
*/

9. 截断字符串
（用瑞兹来截断对面的退路）如果字符串的长度比指定的参数num长，则把多余的部分用...来表示。切记，插入到字符串尾部的三个点号也会计入字符串的长度。但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。
function truncate(str, num) {
  // 请把你的代码写在这里
  if (num > 3 && num < str.length){
    str = str.slice(0,num-3) + "...";
  }
  else if (num >= str.length){
    str = str.slice(0,num);
  }
  else if (num <= 3){
    str = str.slice(0,num) + "...";
  }
  return str;
}
/*
function truncate(str, num) {
  if(num>=str.length){
    return str;
  }
  if(num>3){
    return str.slice(0,num-3)+'...';
  }else{
    return str.slice(0,num)+'...';
  }
}
*/

10. 猴子吃香蕉, 分割数组
（猴子吃香蕉可是掰成好几段来吃哦）把一个数组arr按照指定的数组大小size分割成若干个数组块。例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];
function chunk(arr, size) {
  // 请把你的代码写在这里
  var count = arr.length % size;
  var string = [];
  var middle = size,front = 0;
  var max = count+(arr.length-count)/size;
  var min = (arr.length-count)/size;
  for (var j=0;j<max;j++)
    {
      if (min === 1){
        max--;
        min = 0;
      }
      string[j] = arr.slice(front,middle);
      front = middle;
      middle = middle + size;
      if (middle > arr.length)
          middle = arr.length;
    }
  return string;
}
/*
function chunk(arr, size) {
  var len=0;
  var arr1=[];
  while(len<arr.length){
    arr1.push(arr.slice(len,len+=size));
  }
  return arr1;
}
*/

11. 截断数组
返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。
function slasher(arr, howMany) {
  // 请把你的代码写在这里
  arr.splice(0,howMany);
  return arr;
}
/*
function slasher(arr, howMany) {
  return arr.slice(howMany);
}
*/

12. 比较字符串
（蛤蟆可以吃队友，也可以吃对手）如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。举例，["hello", "Hello"]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。["hello", "hey"]应该返回false，因为字符串"hello"并不包含字符"y"。["Alien", "line"]应该返回true，因为"line"中所有字符都可以在"Alien"找到。
function mutation(arr) {
  // 请把你的代码写在这里
  var string = arr[0].toLowerCase();
  var string2 = arr[1].toLowerCase();
  //string.indexOf(string2) !== -1;
  var arr2 = string.split("");
  var arr3 = string2.split("");
  var count = 0;
  for (var i=0;i<string2.length;i++)
    for (var j=0;j<string.length;j++){
      if (arr3[i] === arr2[j]){
        count++;
        j = string.length;
      }
    }
  if (count === string2.length)
    return true;
  else
    return false;
}
/*
function mutation(arr) {
  var lowerStr1 = arr[0].toLowerCase();
  var lowerStr2 = arr[1].toLowerCase();
  var str2Arr = lowerStr2.split("");
  for(var i=0; i<lowerStr2.length; i++){
    if(lowerStr1.indexOf(str2Arr[i])==-1){
      return false;
    }
  }
  return true;
}
*/

13. 过滤数组假值
（真假美猴王）删除数组中的所有假值。在JavaScript中，假值有false、null、0、""、undefined 和 NaN。
function bouncer(arr) {
  // 请把你的代码写在这里
  function FilterArrays(element){
      return element !== false && element !==undefined && element !== null && element !== 0 && element !== "" && !Number.isNaN(element);
  }
  return arr.filter(FilterArrays);
}
/*
function bouncer(arr) {
  return arr.filter(function(e){
    return e;
  });
}
*/

14. 摧毁数组
金克斯的迫击炮！实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。
function destroyer(arr) {
  var argument = arguments;
  for (var j = 1; j<argument.length; j++){
  argument[0] = argument[0].filter(function FilterElement(element){
      return argument[j] !== element;})
  }
  return argument[0];
}
destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3);
/*
function destroyer(arr) {
  var argument=arguments;//这里必须把arguments的值复制下来
  for(var i=1;i<argument.length;i++){
    argument[0] = argument[0].filter(function(e){
      return argument[i]!==e;
    });
  }
  return argument[0];
}
*/

15. 数组排序并找出元素索引
我身在何处？先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。
function where(arr, num) {
  // 请把你的代码写在这里
  function compareNumbers(a, b)
{
  return a - b;
}
  arr.push(num);
  arr.sort(compareNumbers);
  var i = 0;
  for (i = 0; i < arr.length; i++){
    if (num === arr[i])
      return i;
  }
}
/*
function where(arr, num) {
  arr.push(num);
  var arr1 = arr.sort(function(a,b){return a-b;});
  for(var i=0; i<arr1.length; i++){
    if(arr1[i]==num){return i;}
  }
}
*/
